#!/usr/bin/env python

"""
This script realizes an iterative annotation process for ncRNAs. For a species given as argument and available in a MongoDB instance, it will search for new ncRNA candidates for all the alignments/families stored in a database named "comparative_genomics" (in-house alignments). It will also check if some RFAM families from the last RFAM release are not available as in-house alignments. If not, then this script will search for ncRNAs candidates for these "new" RFAM families.
"""

import os, sys, math, datetime, re

from pyrna.task import Task
from pyrna.db import Rfam
from pyrna.features import DNA, RNA
from pyrna.computations import Gotohscan, Blastr, Cmsearch, Cmalign, Cmbuild, Cmcalibrate
from pyrna.parsers import to_clustalw, parse_stockholm, to_stockholm, parse_clustalw, consensus2d_to_base_pairs, to_bn

from pandas import DataFrame
from bson.objectid import ObjectId

class AnnotateTask(Task):

    def __init__(self, db_name, db_host = "localhost", db_port = 27017, endPoint = None,  familiesPerJob = 10, rfam_ids = None, calibrate = False, align = False, rfam_version = None, gathering_threshold = True, python_abs_path = None, algorithms_abs_path = None):
        Task.__init__(self, db_name = db_name, db_host = db_host, db_port = db_port, endPoint = endPoint, algorithms = algorithms_abs_path, python = python_abs_path)
        self.familiesPerJob = familiesPerJob
        self.rfam_ids = rfam_ids
        if rfam_version:
            self.rfam = Rfam(version = rfam_version)
        else:
            self.rfam = Rfam()
        self.calibrate = calibrate
        self.align = align
        self.gathering_threshold = gathering_threshold

    def getTotalJobsToSubmit(self, data):
        if self.rfam_ids:
            rfam_ids_to_process =  list(self.rfam_ids)
        else:   
            familiesDetails = self.rfam.get_families_details()
            rfam_ids_to_process = range(1, len(familiesDetails)+1)

        in_house_alignments_to_process = []
        ids_to_remove = []
        
        for rfam_id in rfam_ids_to_process:
            in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'source':'db:rfam:RF%05u'%rfam_id})
            if in_house_alignment:
                ids_to_remove.append(rfam_id)
                in_house_alignments_to_process.append(in_house_alignment['_id'])

        for id_to_remove in ids_to_remove:
            rfam_ids_to_process.remove(id_to_remove)        

        if self.calibrate or self.align:
            total_families = in_house_alignments_to_process
        else:   
            total_families = in_house_alignments_to_process + ["RF%05u"%x for x in rfam_ids_to_process]
        
        count = int(math.floor(len(total_families)/self.familiesPerJob)+1)
        print "# of jobs to submit: %i"%count
        return count

    def getScriptContent(self, job_id):
        if self.rfam_ids:
            rfam_ids_to_process =  list(self.rfam_ids)
        else: 
            familiesDetails = self.rfam.get_families_details()
            rfam_ids_to_process = range(1, len(familiesDetails)+1)

        in_house_alignments_to_process = []
        ids_to_remove = []

        for rfam_id in rfam_ids_to_process:
            in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'source':'db:rfam:RF%05u'%rfam_id})
            if in_house_alignment:
                ids_to_remove.append(rfam_id)
                in_house_alignments_to_process.append(in_house_alignment['_id'])

        for id_to_remove in ids_to_remove:
            rfam_ids_to_process.remove(id_to_remove)

        if self.calibrate or self.align:
            total_families = in_house_alignments_to_process       
        else:
            total_families = in_house_alignments_to_process + ["RF%05u"%x for x in rfam_ids_to_process]

        f = int(math.floor(len(total_families)/self.familiesPerJob)+1)

        family_rank = (job_id-1)%f 
    
        first_family = family_rank*self.familiesPerJob
        last_family = family_rank*self.familiesPerJob+self.familiesPerJob

        if last_family > total_families:
            last_family = total_families
        
        families_range = total_families[first_family:last_family]
        
        scriptContent = "#Families processed: "+','.join(families_range)+"\n" #we keep track of the families that will be processed by the job (improve the debugging for annoying jobs (like neverending jobs))

        scriptContent += "./files/grid_tasks/annotate.task -db "+self.db_name+" -algorithms "+self.algorithms+" -python "+self.python+" -h "+self.client.host+" -p "+str(self.client.port)+" -id "+str(job_id)+" -families "+str(self.familiesPerJob)+(" -rfam_ids "+','.join([str(x) for x in self.rfam_ids]) if self.rfam_ids else "")+(" -calibrate " if self.calibrate else "")+(" -align " if self.align else "")+(" -rfam_version %s -ga %s"%(self.rfam.version, 'Y' if self.gathering_threshold else 'N'))
        
        print scriptContent

        return scriptContent

    def storeData(self):
        print "No data to store..."            

    def doTheJob(self, job_id = 1):
        familiesDetails = self.rfam.get_families_details()

        if self.rfam_ids:
            rfam_ids_to_process =  list(self.rfam_ids)
        else:
            rfam_ids_to_process = range(1, len(familiesDetails)+1)

        in_house_alignments_to_process = []
        ids_to_remove = []
        
        for rfam_id in rfam_ids_to_process:
            in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'source':'db:rfam:RF%05u'%rfam_id})
            if in_house_alignment:
                ids_to_remove.append(rfam_id)
                in_house_alignments_to_process.append(in_house_alignment['_id'])

        for id_to_remove in ids_to_remove:
            rfam_ids_to_process.remove(id_to_remove)

        if self.calibrate or self.align:
            total_families = in_house_alignments_to_process       
        else:
            total_families = in_house_alignments_to_process + ["RF%05u"%x for x in rfam_ids_to_process]

        f = int(math.floor(len(total_families)/self.familiesPerJob)+1)

        family_rank = (job_id-1)%f 
    
        first_family = family_rank*self.familiesPerJob
        last_family = family_rank*self.familiesPerJob+self.familiesPerJob

        if last_family > total_families:
            last_family = total_families
        
        families_range = total_families[first_family:last_family]

        if self.calibrate: #calibration for in-house alignments. For now, it is only the calibrations to be used with Infernal. But we can imagine other calibrations for other tools.
            for id in families_range:
                if not id.startswith("RF"):
                    in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'_id':id})
                    print in_house_alignment['source']
                    if in_house_alignment:
                        rnas, consensus_2d = parse_clustalw(in_house_alignment['alignment'])
                        stockholm_content = to_stockholm(consensus_2d, rnas)
                        cm_content = Cmbuild().build(stockholm_content = stockholm_content)
                        cm_content = Cmcalibrate().calibrate(cm_content)
                        in_house_alignment['cm'] = cm_content
                        self.client['comparative_genomics']['alignments'].save(in_house_alignment)
                    else:
                        print "Weird, i cannot recover the in-house alignment %s!!!!!"%id
                        sys.exit(1)
        elif self.align:
            for id in families_range:
                if not id.startswith("RF"):
                    in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'_id':id})
                    
                    if in_house_alignment:
                        ncRNAs_hits_to_keep_in_alignment = []
                        ncRNAs_hits_to_not_keep_in_alignment = []

                        for database_name in self.client.database_names():
                            print database_name
                            for new_ncRNA_hit in self.client[database_name]['ncRNAs'].find({'alignment': id+"@alignments", 'aligned': False}):
                                if new_ncRNA_hit.get('score', 0) < 1e-5: #if no score, we have no way to know if it's interesting or not. So we keep it (so score = 0)
                                    new_ncRNA_hit['db_name'] = database_name #that will be useful later
                                    ncRNAs_hits_to_keep_in_alignment.append(new_ncRNA_hit)
                                    self.client[database_name]['ncRNAs'].update({ '_id': new_ncRNA_hit['_id'] }, { '$unset' : { 'aligned' : 1} })
                                else: #this ncRNAs hits will be aligned just to infer their secondary structure. But the alignment will not be kept.
                                    new_ncRNA_hit['db_name'] = database_name #that will be useful later
                                    ncRNAs_hits_to_not_keep_in_alignment.append(new_ncRNA_hit)
                                    self.client[database_name]['ncRNAs'].update({ '_id': new_ncRNA_hit['_id'] }, { '$unset' : { 'aligned' : 1} })
                        
                        cmalign = Cmalign()
                        our_molecules = []
                        consensus2D = None

                        rnas, consensus_2d = parse_clustalw(in_house_alignment['alignment'])
                        stockholm_content = to_stockholm(consensus_2d, rnas)
                        cm_content = in_house_alignment.get('cm', None)
                        
                        if cm_content != None: #some families can be tricky to calibrate (large families/ncRNAs). So it is possible that the generation of the CM data has been stopped.

                            if len(ncRNAs_hits_to_not_keep_in_alignment): #here, each ncRNA hit will be aligned separately
                                for ncRNA in ncRNAs_hits_to_not_keep_in_alignment:
                                    ncRNAs_to_be_aligned = [RNA(name = str(ncRNAs_hits_to_not_keep_in_alignment.index(ncRNA)), sequence = ncRNA['sequence'])]
                                    (aligned_molecules, organisms, consensus2D) = cmalign.align(ncRNAs_to_be_aligned, stockholm_content = stockholm_content, cm_content = cm_content)
                                    for aligned_molecule in aligned_molecules:
                                        if aligned_molecule.name.isdigit(): #we infer the secondary structure for the ncRNA hit aligned and we store it as a bracket notation
                                            ncRNA_hit = ncRNAs_hits_to_not_keep_in_alignment[int(aligned_molecule.name)]
                                            bn = to_bn(consensus2d_to_base_pairs(aligned_molecule, consensus2D), len(ncRNA_hit['sequence']))
                                            self.client[ncRNA_hit['db_name']]['ncRNAs'].update({ '_id': ncRNA_hit['_id'] }, {'$set': { 'bn' : bn}})           
                            
                            if len(ncRNAs_hits_to_keep_in_alignment): #here, all the ncRNAs hits are aligned in a single computation

                                ncRNAs_to_be_aligned = []
                                for ncRNA in ncRNAs_hits_to_keep_in_alignment: #we create new ncRNA objects to be aligned with cmalign and whose names correspond to their index (their name is a digit)
                                    ncRNAs_to_be_aligned.append(RNA(name = str(ncRNAs_hits_to_keep_in_alignment.index(ncRNA)), sequence = ncRNA['sequence']))

                                (aligned_molecules, organisms, consensus2D) = cmalign.align(ncRNAs_to_be_aligned, stockholm_content = stockholm_content, cm_content = cm_content)
                        
                                for aligned_molecule in aligned_molecules:
                                    if aligned_molecule.name.isdigit():
                                        ncRNA_hit = ncRNAs_hits_to_keep_in_alignment[int(aligned_molecule.name)]
                                        bn = to_bn(consensus2d_to_base_pairs(aligned_molecule, consensus2D), len(ncRNA_hit['sequence']))
                                        self.client[ncRNA_hit['db_name']]['ncRNAs'].update({ '_id': ncRNA_hit['_id'] }, {'$set': { 'bn' : bn}})
                                        aligned_molecule.name = "[New]"+ncRNA_hit['_id']+"@"+ncRNA_hit['db_name']
                                        our_molecules.append(aligned_molecule)
                                    else:
                                        our_molecules.append(aligned_molecule) #we don't forget to keep the former molecules from the in-house alignment
                                
                                in_house_alignment['alignment'] = to_clustalw(consensus2D, our_molecules)

                                self.client['comparative_genomics']['alignments'].save(in_house_alignment)

                        else:
                            print "No cm data found for %s."%id                      

                    else:
                        print "Weird, i cannot recover the in-house alignment %s!!!!!"%id
                        sys.exit(1)   
        else: #annotation

            genomic_sequences = []

            for genome in self.db['genomes'].find():
                dna = DNA(name = genome['name'], sequence = genome['sequence'])
                dna._id = genome['_id']
                dna.organism = genome['organism']
                genomic_sequences.append(dna)
            
            #is it necessary to download data from RFAM or all the families to process are in-house alignments?
            for id in families_range:
                if id.startswith("RF"):
                    self.rfam.generate_CMs()
                    self.rfam.generate_seed_alignments()
                    break

            for id in families_range:

                print "Processing ", id, "..."
                
                cmalign = Cmalign()
                cm_content = None
                stockholm_content = None
                rnas = None
                
                if id.startswith("RF"): #this is an RFAM family we need to do since no corresponding in-house alignment
                    if len(familiesDetails[familiesDetails['accession'] == id]): #some RFAM families are not available 
                        self.annotate_genomic_sequences_with_cmsearch(genomic_sequences, id, None, None, None, familiesDetails)
                    else: #we still record a computation, even if the family is not available

                        outputs = []
                        inputs = []

                        for genomic_sequence in genomic_sequences:
                            inputs.append(str(genomic_sequence._id)+"@genomes")

                        inputs.append("db:rfam:%s" % id)

                        computation = {
                            '_id': str(ObjectId()),
                            'date': str(datetime.datetime.now()),
                            'job_id': job_id,
                            'inputs': inputs,
                            'outputs': outputs,
                            'executable': "script_%i.sh"%job_id
                        }
                else: #in-house alignment
                    in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'_id':id})

                    if in_house_alignment: 
                        rnas, consensus_2d = parse_clustalw(in_house_alignment['alignment'])
                        stockholm_content = to_stockholm(consensus_2d, rnas)
                        cm_content = in_house_alignment.get('cm', None)
                        if cm_content != None: #some families can be tricky to calibrate (large families/ncRNAs). So it is possible that the generation of the CM data has been stopped.
                            self.annotate_genomic_sequences_with_cmsearch(genomic_sequences, id, in_house_alignment, cm_content, stockholm_content, familiesDetails)
                        else:
                            print "No cm data found for %s."%id    
                    else:
                        print "Weird, i cannot recover the in-house alignment %s!!!!!"%id
                        sys.exit(1)

        self.client.disconnect()            

    def annotate_genomic_sequences_with_cmsearch(self, genomic_sequences, id, in_house_alignment, cm_content, stockholm_content, familiesDetails):
        outputs = []
        inputs = []

        for genomic_sequence in genomic_sequences:
            inputs.append(str(genomic_sequence._id)+"@genomes")

        computation = {
            '_id': str(ObjectId()),
            'date': str(datetime.datetime.now()),
            'job_id': job_id,
            'inputs': inputs,
            'executable': "script_%i.sh"%job_id
        }

        cmsearch = Cmsearch()
        computation['tool'] = 'Infernal, cmsearch'

        hits = []
        
        if in_house_alignment: #we have an in-house alignment. We use it
            inputs.append("%s@alignments" % in_house_alignment['_id'])
            try:       
                hits = cmsearch.search(genomic_sequences, cm_content = cm_content, gathering_threshold = False)
            except Exception, e:
                print e
                sys.exit(1)    
        else: #We will use the RFAM seed alignment
            inputs.append("db:rfam:%s" % id)
            try:       
                hits = cmsearch.search(genomic_sequences, "%s" % id, self.rfam, gathering_threshold = self.gathering_threshold)
            except Exception, e:
                print e
                sys.exit(1)

        ncRNAs = []

        for row in hits.iterrows():
            hit = row[1]
            ncRNA = {
                '_id': str(ObjectId()),
                'sequence': hit['sequence'],
                'source': "tool:cmsearch:%s"%hit['source'],
                'organism': hit['organism'],
                'genomeName': hit['target_name'],
                'genomicStrand': hit['target_strand'],
                'genomicPositions': [hit['target_positions'][0][0], hit['target_positions'][-1][1]],
                'score': hit['e_value']
            }

            if id.startswith("RF"): #hit from an RFAM seed alignment
                ncRNA['name'] = "[New] "+familiesDetails[familiesDetails['accession'] == id].iloc[0,4]#id
                ncRNA['class'] = "[New] "+familiesDetails[familiesDetails['accession'] == id].iloc[0,2]#family
            else: #hit from an in-house alignment
                if in_house_alignment['source'].startswith("db:rfam:"): #in-house alignment recorder from an RFAM entry
                    rfam_id = in_house_alignment['source'].split("db:rfam:")[1]
                    ncRNA['name'] = "[New] "+familiesDetails[familiesDetails['accession'] == rfam_id].iloc[0,4]#id
                    ncRNA['class'] = "[New] "+familiesDetails[familiesDetails['accession'] == rfam_id].iloc[0,2]#family
                else: #this is an in-house alignment from a different origin. It is planed that an in-house alignment will have a name and a class field
                    ncRNA['name'] = "[New] "+in_house_alignment.get('name', 'Unknown')
                    ncRNA['class'] = "[New] "+in_house_alignment.get('class', 'Unknown')

            for genome in genomic_sequences:
                if genome.name == hit['target_name']:
                    ncRNA['genome'] = genome._id+"@genomes"
                    break

            already_stored = False #already stored?? This is important to avoid to accumulate the same hits after several annotation iterations

            for stored_ncRNA in self.db['ncRNAs'].find({'genome': ncRNA['genome']}):
                if stored_ncRNA['genomicStrand'] == ncRNA['genomicStrand'] and stored_ncRNA['genomicPositions'] == ncRNA['genomicPositions'] and stored_ncRNA['source'] == ncRNA['source']:
                    already_stored = True
                    break

            if already_stored:
                continue
            else:
                ncRNAs.append(ncRNA)

        if len(ncRNAs):

            if not in_house_alignment: #here this means that the job file has asked for an RFAM alignment but......
                in_house_alignment = self.client['comparative_genomics']['alignments'].find_one({'source': 'db:rfam:%s'% id}) #it is possible that, meanwhile, another job has recorded an in-house alignment for this RFAM family
                if not in_house_alignment: #if not, it is up to this job to record a new in house alignment
                    stockholm_content = self.rfam.get_entry(rfam_id = "%s" % id, format='stockholm')
                    (aligned_molecules, organisms, consensus2D) = parse_stockholm(stockholm_content)
                    in_house_alignment = {
                        '_id': str(ObjectId()),
                        'source': "db:rfam:%s" % id,
                        'name': familiesDetails[familiesDetails['accession'] == id].iloc[0,4],
                        'class': familiesDetails[familiesDetails['accession'] == id].iloc[0,2],
                        'alignment': to_clustalw(consensus2D, aligned_molecules),
                        'cm': self.rfam.get_CM(id)
                    }

                    self.client['comparative_genomics']['alignments'].insert(in_house_alignment)
            
            outputs.append(in_house_alignment['_id']+"@alignments")

            for ncRNA in ncRNAs:
                ncRNA['alignment'] = in_house_alignment['_id']+"@alignments"
                ncRNA['aligned'] = False
                self.db['ncRNAs'].insert(ncRNA)
                outputs.append(ncRNA['_id']+"@ncRNAs")

        #one computation per rfam_id
        computation['outputs'] = outputs
        self.db["computations"].insert(computation)

if __name__ == '__main__':
    job_id = None
    db_name = None
    db_host = "localhost"
    db_port = 27017
    endpoint = None
    check = False
    calibrate = False
    align = False
    familiesPerJob = 10
    rfam_version = None
    gathering_threshold = True
    python_abs_path = None
    algorithms_abs_path = None
    rfam_ids = None

    if "-id" in sys.argv:
        job_id = int(sys.argv[sys.argv.index("-id")+1])
    if "-db" in sys.argv:
        db_name = sys.argv[sys.argv.index("-db")+1]
    if "-h" in sys.argv:
        db_host = sys.argv[sys.argv.index("-h")+1]
    if "-p" in sys.argv:
        db_port = int(sys.argv[sys.argv.index("-p")+1])
    if "-e" in sys.argv and sys.argv[sys.argv.index("-e")+1] == '1':
        endpoint = "https://sbgwms1.in2p3.fr:7443/glite_wms_wmproxy_server"
    elif "-e" in sys.argv and sys.argv[sys.argv.index("-e")+1] == '2':
        endpoint = "https://sbgwms2.in2p3.fr:7443/glite_wms_wmproxy_server"
    
    if "-families" in sys.argv:
        familiesPerJob = int(sys.argv[sys.argv.index("-families")+1])
    if "-rfam_version" in sys.argv:
        rfam_version = sys.argv[sys.argv.index("-rfam_version")+1]
    if "-ga" in sys.argv:
        gathering_threshold = sys.argv[sys.argv.index("-ga")+1].strip() == 'Y'
    if "-algorithms" in sys.argv:
        algorithms_abs_path = sys.argv[sys.argv.index("-algorithms")+1].strip()
    if "-python" in sys.argv:
        python_abs_path = sys.argv[sys.argv.index("-python")+1].strip()
    if "-rfam_ids" in sys.argv:
        rfam_ids = [int(x) for x in sys.argv[sys.argv.index("-rfam_ids")+1].split(',')]

    check = "-check" in sys.argv

    calibrate = "-calibrate" in sys.argv

    align = "-align" in sys.argv

    if calibrate or align:
        db_name = "comparative_genomics"

    if not python_abs_path or not algorithms_abs_path:
        print "Usage: annotate.task -algorithms algorithms_abs_path -python python_abs_path [-db db_name_to_annotate (optional for calibration)] [-h database_host] [-p database_port] [-families nb of families per job (default: 10)] [-rfam_ids families to use for the full annotation process] [-e glite_end_point] [-calibrate to calibrate in-house alignments] [-align to align ncRNAs found from the previous iteration process to their seed alignment] [-rfam_version Rfam version (default 11.0)] [-ga Y|N gathering_threshold (default: Y)]"
        sys.exit(1)

    task = AnnotateTask(db_name = db_name, db_host = db_host, db_port = db_port, endPoint = endpoint, familiesPerJob = familiesPerJob, rfam_ids = rfam_ids, calibrate = calibrate, align = align, rfam_version = rfam_version, gathering_threshold = gathering_threshold, python_abs_path = python_abs_path, algorithms_abs_path = algorithms_abs_path)

    if check:
        task.getTotalJobsToSubmit(None)
        if job_id:
            task.getScriptContent(job_id)
    elif job_id:
        task.doTheJob(job_id)
    else:
        outputDir = os.getenv("HOME")+"/tmp/jobs_%s_on_%s"%(os.path.basename(__file__), db_name)
        if os.path.exists(outputDir):
            print "%s already exists"%outputDir
            sys.exit()
        task.submitJobs(os.path.basename(__file__))
